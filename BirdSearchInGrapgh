def exist(board, word):
    rows, cols = len(board), len(board[0])

    def dfs(r, c, i):
        if i == len(word): return True
        if r < 0 or r >= rows or c < 0 or c >= cols: return False
        if board[r][c] != word[i]: return False

        temp, board[r][c] = board[r][c], "#"
        found = (dfs(r+1, c, i+1) or dfs(r-1, c, i+1) or
                 dfs(r, c+1, i+1) or dfs(r, c-1, i+1))
        board[r][c] = temp
        return found

    for r in range(rows):
        for c in range(cols):
            if dfs(r, c, 0): return True
    return False

# 🔍 Example:
board = [
    ['B','I','R','D'],
    ['A','X','Y','Z'],
    ['W','O','R','K']
]
word = "BIRD"

print(exist(board, word))  # 🟢 Output: True


"""Given a 2D grid and a word, return true if the word exists in the grid — moving in 4 directions (up/down/left/right), one letter per step. No cell may be used more than once per path.

🧠 Approach:
Use DFS with backtracking

For each cell, if it matches the word[0], start DFS.

Mark visited cells temporarily.

Backtrack after exploring.

⏱ Time Complexity:
O(N × M × 4^L) — N×M grid, L = word length, 4 directions per char.

💾 Space Complexity:
O(L) recursion stack (L = word length)"""