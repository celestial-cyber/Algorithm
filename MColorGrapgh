def graph_coloring(graph, m):
    n = len(graph)
    color = [0] * n

    def is_safe(v, c):
        for i in range(n):
            if graph[v][i] == 1 and color[i] == c:
                return False
        return True

    def solve(v):
        if v == n:
            return True
        for c in range(1, m+1):
            if is_safe(v, c):
                color[v] = c
                if solve(v+1):
                    return True
                color[v] = 0
        return False

    if solve(0):
        return color
    else:
        return None

# 🔍 Example:
graph = [
    [0, 1, 1, 1],
    [1, 0, 1, 0],
    [1, 1, 0, 1],
    [1, 0, 1, 0]
]
m = 3
print(graph_coloring(graph, m))  # 🟢 Output: [1, 2, 3, 2] (or similar valid coloring)












""". M-Color Graph Coloring
🔍 Problem:
Color a graph with at most M colors such that no two adjacent nodes have the same color.

🧠 Approach:
Use backtracking to try assigning each color.

Before coloring, check if the color is safe (i.e., neighbors don’t have the same color).

⏱ Time Complexity:
O(M^V) — V = number of vertices, M = colors

💾 Space Complexity:
O(V) — storing color assignments

"""