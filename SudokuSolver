def solve_sudoku(board):
    def is_valid(r, c, val):
        for i in range(9):
            if board[r][i] == val or board[i][c] == val:
                return False
            box_r = 3 * (r // 3) + i // 3
            box_c = 3 * (c // 3) + i % 3
            if board[box_r][box_c] == val:
                return False
        return True

    def backtrack():
        for r in range(9):
            for c in range(9):
                if board[r][c] == ".":
                    for d in "123456789":
                        if is_valid(r, c, d):
                            board[r][c] = d
                            if backtrack():
                                return True
                            board[r][c] = "."
                    return False
        return True

    backtrack()

# üîç Example usage:
sudoku = [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]
solve_sudoku(sudoku)

# üü¢ Output (in-place modified):
# [['5', '3', '4', '6', '7', '8', '9', '1', '2'],
#  ['6', '7', '2', '1', '9', '5', '3', '4', '8'],
#  ['1', '9', '8', '3', '4', '2', '5', '6', '7'],
#  ...
# ]

"""üîç Problem:
Solve a partially filled 9√ó9 Sudoku board. Each row, column, and 3√ó3 subgrid must contain digits 1‚Äì9 without repetition.

üß† Approach:
Use backtracking:

Traverse each cell.

If cell is empty (i.e., '.'), try placing digits 1‚Äì9.

For each digit:

Check if it's valid in row, column, and 3√ó3 box.

If valid, place it and recursively solve.

If it leads to failure, backtrack (remove and try next digit).

‚è± Time Complexity:
Worst-case: O(9^(81)) ‚Üí since we try 9 choices for each cell.

Pruned significantly by constraints.

üíæ Space Complexity:
O(1) extra space (in-place), but recursion stack: O(81)"""