#include <iostream>
#include <vector>
#include <string>
using namespace std;

void helper(vector<vector<int>> &mat, int r, int c, string path,
            vector<string> &ans, vector<vector<bool>> &vis) {
    int n = mat.size();

    // Boundary + invalid checks
    if (r < 0 || c < 0 || r >= n || c >= n || mat[r][c] == 0 || vis[r][c]) {
        return;
    }

    // Destination reached
    if (r == n - 1 && c == n - 1) {
        ans.push_back(path);
        return;
    }

    // Mark current cell as visited
    vis[r][c] = true;

    // Move Down
    helper(mat, r + 1, c, path + "D", ans, vis);

    // Move Up
    helper(mat, r - 1, c, path + "U", ans, vis);

    // Move Left
    helper(mat, r, c - 1, path + "L", ans, vis);

    // Move Right
    helper(mat, r, c + 1, path + "R", ans, vis);

    // Backtrack â†’ unmark visited
    vis[r][c] = false;
}

vector<string> findPath(vector<vector<int>> &mat) {
    int n = mat.size();
    vector<string> ans;

    if (n == 0 || mat[0][0] == 0 || mat[n - 1][n - 1] == 0) {
        return ans; // no path
    }

    vector<vector<bool>> vis(n, vector<bool>(n, false));
    helper(mat, 0, 0, "", ans, vis);
    return ans;
}

// Example usage
int main() {
    vector<vector<int>> maze = {
        {1, 0, 0, 0},
        {1, 1, 0, 1},
        {1, 1, 0, 0},
        {0, 1, 1, 1}
    };

    vector<string> paths = findPath(maze);

    for (string p : paths) {
        cout << p << endl;
    }

    return 0;
}
